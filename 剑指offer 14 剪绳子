给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

示例 1：

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
提示：

2 <= n <= 58


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/jian-sheng-zi-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

解题思路：
  当绳子总长度为n，则相当于在长度为n-1时增加了1，当长度为n-1时假定最佳分割方法为 dp[i]*dp[n-1-i]，所以当长度为n时最佳分割方法为max(dp[i+1]*dp[n-1-i], dp[i]*dp[n-i]),依次由上至下
或者由下至上进行动态规划求解，注意此处当 i < 4 部分应该使用i本身代替dp[i]，因为对i不进行切割的值会大于切割后，但是当i >= 4时一定存在dp[i] >= i   //(n-i)同理；
将上述此题存在规律：
        dp[1] = 1; 
        dp[2] = 1; dp[2] = dp[1]（应该用1代替dp[1]）*dp[1]（应该用1代替dp[1]）= 1;
        dp[3] = 2; dp[3] = dp[2]（应该用2代替dp[2]）*dp[1]（应该用1代替dp[1]）= 2;
        dp[4] = 4; dp[4] = Math.max(dp[2]（应该用2代替dp[2]）*dp[2]（应该用2代替dp[2]）, dp[1]（应该用1代替dp[1]）*dp[3]（应该用3代替dp[3]）) = 4;
        dp[5] = 6; dp[5] = Math.max(dp[2]（应该用2代替dp[2]）*dp[3]（应该用3代替dp[2]）, dp[1]（应该用3代替dp[3]）*dp[2]（应该用2代替dp[2]）) = 6;
        dp[6] = 9; dp[6] = Math.max(dp[3]（应该用3代替dp[3]）*dp[3]（应该用3代替dp[3]）, dp[4]*dp[2]（应该用2代替dp[2]）) = 9;
        dp[7] = 12; dp[7] = dp[3]（应该用3代替dp[3]）*dp[4];
        dp[8] = 18; dp[8] = Math.max(dp[5] * 3, dp[4]*dp[4]);
        dp[9] = 27; dp[9] = Math.max(dp[6] * 3, dp[4]*dp[5]);
        ...
        当n > 7 时：
        max取值总是 3 * dp[n-3]
        
        
所以代码为：
  class Solution {
    public int cuttingRope(int n) {
        int[] dp = new int[n+6];
        dp[1] = 1;
        dp[2] = 1;
        dp[3] = 2;
        dp[4] = 4;
        dp[5] = 6;
        dp[6] = 9;
        if (n < 7) 
            return dp[n];
        int index = 7;
        while(index <= n){
            dp[index] = 3 * dp[index - 3];
            index ++;
        }
        return dp[index-1];
    }
}
