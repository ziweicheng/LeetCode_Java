用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )

 

示例 1：

输入：
["CQueue","appendTail","deleteHead","deleteHead"]
[[],[3],[],[]]
输出：[null,null,3,-1]
示例 2：

输入：
["CQueue","deleteHead","appendTail","appendTail","deleteHead","deleteHead"]
[[],[],[5],[2],[],[]]
输出：[null,-1,null,null,5,2]
提示：

1 <= values <= 10000
最多会对 appendTail、deleteHead 进行 10000 次调用

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

解题思路：

  栈特点： 先入后出(FILO)
  队列特点： 先入先出(FIFO)
  用栈存储数据时，想要实现先入先出则需要将栈全部进行反转在输出。此时可以联想到用两个栈第一个栈用于存放输入数据，
第二个栈将输入数据在从A栈存入相当于实现反转，此时从栈B取出时相当于从存入A栈的原始数据先入先出。


class CQueue {
    LinkedList<Integer> stack_in, stack_out;
    public CQueue() {
        stack_in = new LinkedList<>();
        stack_out = new LinkedList<>();
    }
    
    public void appendTail(int value) {
        stack_in.addLast(value);
    }
    
    public int deleteHead() {
        if (!stack_out.isEmpty()){
            return stack_out.remove();
        }
        else if (!stack_in.isEmpty()){
            stack_out.addLast(stack_in.remove());
            return stack_out.remove();
        }
        else{
            return -1;
        }
    }
}

/**
 * Your CQueue object will be instantiated and called as such:
 * CQueue obj = new CQueue();
 * obj.appendTail(value);
 * int param_2 = obj.deleteHead();
 */
